import { io, Socket } from 'socket.io-client';

export interface RequestUpdate {
  type: 'request_created' | 'request_updated' | 'request_deleted' | 'queue_reordered';
  eventId: number;
  data: any;
  timestamp: Date;
}

export interface EventUpdate {
  type: 'event_started' | 'event_ended' | 'event_updated';
  eventId: number;
  data: any;
  timestamp: Date;
}

export interface SystemNotification {
  type: 'info' | 'warning' | 'error' | 'success';
  message: string;
  timestamp: Date;
  targetUsers?: number[];
  targetEvents?: number[];
}

export interface QueueUpdate {
  eventId: number;
  currentlyPlaying?: any;
  nextInQueue?: any;
  totalInQueue: number;
  estimatedWaitTime?: number;
}

class WebSocketService {
  private socket: Socket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 8;
  private baseReconnectInterval = 1000;
  private maxReconnectInterval = 30000;
  private isConnected = false;
  private isConnecting = false;
  private eventListeners = new Map<string, Set<Function>>();
  private connectionPromise: Promise<boolean> | null = null;
  private heartbeatInterval: NodeJS.Timeout | null = null;
  private lastPongTime = 0;
  private heartbeatTimeout = 30000; // 30秒心跳超時

  // 初始化 WebSocket 連接 - 增加連接管理
  connect(token?: string): Promise<boolean> {
    // 如果已經連接，直接返回
    if (this.isConnected && this.socket) {
      console.log('[WebSocket] 已經連接，重用現有連接');
      return Promise.resolve(true);
    }

    // 如果正在連接中，返回現有的連接 Promise
    if (this.isConnecting && this.connectionPromise) {
      console.log('[WebSocket] 連接進行中，等待現有連接完成');
      return this.connectionPromise;
    }

    // 開始新的連接
    this.isConnecting = true;
    this.connectionPromise = new Promise((resolve, reject) => {
      try {
        const wsToken = token || localStorage.getItem('token');
        
        if (!wsToken) {
          console.warn('[WebSocket] 沒有認證token，跳過連接');
          this.isConnecting = false;
          this.connectionPromise = null;
          resolve(false);
          return;
        }

        // 如果已有連接，先斷開
        if (this.socket) {
          console.log('[WebSocket] 斷開現有連接以建立新連接');
          this.socket.disconnect();
          this.socket = null;
        }

        const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';
        const wsUrl = apiUrl.replace(/^http/, 'ws');
        
        console.log('[WebSocket] 連接到:', `${wsUrl}/realtime`);
        
        this.socket = io(`${wsUrl}/realtime`, {
          auth: {
            token: wsToken
          },
          transports: ['websocket', 'polling'],
          timeout: 10000,
          forceNew: true
        });

        this.socket.on('connect', () => {
          console.log('[WebSocket] 連接成功');
          this.isConnected = true;
          this.isConnecting = false;
          this.reconnectAttempts = 0;
          this.connectionPromise = null;
          this.startHeartbeat();
          resolve(true);
        });

        this.socket.on('connect_error', (error) => {
          console.error('[WebSocket] 連接錯誤:', error);
          this.isConnected = false;
          this.isConnecting = false;
          this.connectionPromise = null;
          
          if (this.reconnectAttempts < this.maxReconnectAttempts) {
            const delay = this.calculateReconnectDelay();
            setTimeout(() => {
              this.reconnectAttempts++;
              console.log(`[WebSocket] 重新連接嘗試 ${this.reconnectAttempts}/${this.maxReconnectAttempts}，延遲: ${delay}ms`);
              this.connect(wsToken);
            }, delay);
          } else {
            console.error('[WebSocket] 達到最大重連次數，停止重連');
            reject(error);
          }
        });

        this.socket.on('disconnect', (reason) => {
          console.log('[WebSocket] 連接中斷:', reason);
          this.isConnected = false;
          this.isConnecting = false;
          this.connectionPromise = null;
          this.stopHeartbeat();
          
          if (reason === 'io server disconnect') {
            // 服務器主動斷開，需要重新連接
            setTimeout(() => this.connect(wsToken), 2000);
          }
        });

        // 設置事件監聽器
        this.setupEventListeners();

        // 連接超時處理
        setTimeout(() => {
          if (!this.isConnected) {
            console.warn('[WebSocket] 連接超時');
            this.isConnecting = false;
            this.connectionPromise = null;
            this.socket?.disconnect();
            resolve(false);
          }
        }, 15000);

      } catch (error) {
        console.error('[WebSocket] 初始化失敗:', error);
        this.isConnecting = false;
        this.connectionPromise = null;
        reject(error);
      }
    });

    return this.connectionPromise;
  }

  // 設置事件監聽器
  private setupEventListeners() {
    if (!this.socket) return;

    // 點歌請求更新
    this.socket.on('request_update', (update: RequestUpdate) => {
      console.log('[WebSocket] 收到點歌請求更新:', update);
      this.emit('request_update', update);
    });

    // 活動更新
    this.socket.on('event_update', (update: EventUpdate) => {
      console.log('[WebSocket] 收到活動更新:', update);
      this.emit('event_update', update);
    });

    // 隊列更新
    this.socket.on('queue_update', (update: QueueUpdate) => {
      console.log('[WebSocket] 收到隊列更新:', update);
      this.emit('queue_update', update);
    });

    // 系統通知
    this.socket.on('system_notification', (notification: SystemNotification) => {
      console.log('[WebSocket] 收到系統通知:', notification);
      this.emit('system_notification', notification);
    });

    // 在線統計
    this.socket.on('online_stats', (stats: any) => {
      console.log('[WebSocket] 收到在線統計:', stats);
      this.emit('online_stats', stats);
    });
  }

  // 斷開連接
  disconnect() {
    if (this.socket) {
      console.log('[WebSocket] 主動斷開連接');
      this.stopHeartbeat();
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
      this.isConnecting = false;
      this.connectionPromise = null;
    }
  }

  // 開始心跳檢測
  private startHeartbeat() {
    this.stopHeartbeat(); // 清除現有的心跳
    
    console.log('[WebSocket] 開始心跳檢測');
    this.lastPongTime = Date.now();
    
    this.heartbeatInterval = setInterval(() => {
      if (this.socket && this.isConnected) {
        const now = Date.now();
        
        // 檢查是否超時
        if (now - this.lastPongTime > this.heartbeatTimeout) {
          console.warn('[WebSocket] 心跳超時，重新連接');
          this.reconnect();
          return;
        }
        
        // 發送心跳
        this.socket.emit('ping', { timestamp: now });
        console.log('[WebSocket] 發送心跳');
      }
    }, 10000); // 每10秒發送一次心跳
    
    // 監聽心跳回應
    if (this.socket) {
      this.socket.on('pong', (data) => {
        this.lastPongTime = Date.now();
        const latency = this.lastPongTime - (data?.timestamp || 0);
        console.log(`[WebSocket] 收到心跳回應，延遲: ${latency}ms`);
      });
    }
  }

  // 停止心跳檢測
  private stopHeartbeat() {
    if (this.heartbeatInterval) {
      clearInterval(this.heartbeatInterval);
      this.heartbeatInterval = null;
      console.log('[WebSocket] 停止心跳檢測');
    }
  }

  // 計算重連延遲（指數退避算法 + 隨機抖動）
  private calculateReconnectDelay(): number {
    // 指數退避：2^n * baseInterval
    const exponentialDelay = Math.pow(2, this.reconnectAttempts) * this.baseReconnectInterval;
    
    // 限制最大延遲
    const cappedDelay = Math.min(exponentialDelay, this.maxReconnectInterval);
    
    // 添加隨機抖動（±25%）避免雷群效應
    const jitter = cappedDelay * 0.25 * (Math.random() - 0.5);
    
    return Math.max(cappedDelay + jitter, this.baseReconnectInterval);
  }

  // 發送消息到服務器
  send(event: string, data?: any) {
    if (this.socket && this.isConnected) {
      this.socket.emit(event, data);
    } else {
      console.warn('[WebSocket] 嘗試發送消息但未連接:', event, data);
    }
  }

  // 監聽事件
  on(event: string, callback: Function) {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, new Set());
    }
    this.eventListeners.get(event)!.add(callback);
  }

  // 取消監聽事件
  off(event: string, callback?: Function) {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      if (callback) {
        listeners.delete(callback);
      } else {
        listeners.clear();
      }
    }
  }

  // 內部事件分發
  private emit(event: string, data: any) {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          console.error(`[WebSocket] 事件處理器錯誤 (${event}):`, error);
        }
      });
    }
  }

  // 加入活動房間
  joinEvent(eventId: number) {
    if (this.isConnected) {
      console.log('[WebSocket] 加入活動房間:', eventId);
      this.send('join_event', { eventId });
    }
  }

  // 離開活動房間
  leaveEvent(eventId: number) {
    if (this.isConnected) {
      console.log('[WebSocket] 離開活動房間:', eventId);
      this.send('leave_event', { eventId });
    }
  }

  // 獲取連接狀態
  getConnectionStatus() {
    return {
      isConnected: this.isConnected,
      reconnectAttempts: this.reconnectAttempts,
      socketId: this.socket?.id || null
    };
  }

  // 手動重新連接
  async reconnect() {
    if (this.socket) {
      this.disconnect();
    }
    this.reconnectAttempts = 0;
    return await this.connect();
  }
}

// 創建單例實例
export const websocketService = new WebSocketService();
export default websocketService;